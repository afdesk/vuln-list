{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-06-12T18:52:33Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "ouroboros"
  },
  "Advisory": {
    "DatabaseId": 212117,
    "Id": "GSA_kwCzR0hTQS04N21mLTl3ZzYtcHBmOM4AAzyV",
    "GhsaId": "GHSA-87mf-9wg6-ppf8",
    "References": [
      {
        "Url": "https://github.com/joshua-maros/ouroboros/issues/88"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2023-0042.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-87mf-9wg6-ppf8"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-87mf-9wg6-ppf8"
      }
    ],
    "Description": "## Summary\nCurrently, Ouroboros works internally by creating a struct where all uses of 'this are replaced by 'static. However, a recent addition to Miri checks that references passed to functions are valid during the entire execution of the function, even when those references are passed inside a struct. This poses an issue for dropping self-referencing values, as the reference becomes invalid during the dropping process. Effectively, since self-referencing structs are not allowed in vanilla Rust, there is no allowance for dropping dataduring a function that has also been given a reference to that data. There's usually no way to pass a and \u0026a to the same function.\n\nA fix was attempted, where the struct would be turned in to a raw byte array and only transformed back into the underlying data type inside each function. This is allowable as a reference can be created and die over the body of a function, as long as the \nreference was created inside the function. However, this is also not sound if the original struct contains padding. There is no way to initialize padding bytes to a known value that Miri will accept, so when it is cast to an array some of the bytes contain uninitialized values. This is not acceptable (despite the fact that these bytes are never read) due to the potential for optimizations that may read from the uninitialized bytes. Besides which, this fix does not allow for template or constant parameters as there is no way to check the size of a templated type without giving specific, concrete values for the template parameters.\n\nThe crate at this point is no longer maintained, and previous users should migrate their code to use [self_cell](https://github.com/Voultapher/self_cell) instead.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-06-12T18:52:23Z",
    "Severity": "MODERATE",
    "Summary": "Ouroboros is Unsound",
    "UpdatedAt": "2023-06-12T18:52:33Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 0.15.6"
    }
  ]
}